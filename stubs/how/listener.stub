<comment>Description:</comment>
An event listener lets you, as the name suggests,
listen to events. :D

<comment>Create an Event Listener:</comment>
GÃ¼nther makes it really easy to create a new event listener class.
Just execute 'guenther make:listener <Name>'.

Example:
'guenther make:controller StorageEventListener'

<comment>Register an Event Listener:</comment>
Every event listener must be registered in your extension class.

Example:
protected function subscribe(\Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher)
{
    $storageEventListener = new Listener\StorageEventListener($this->getContainer(), $this->getConfig());
    $dispatcher->addListener(\Bolt\Events\StorageEvents::POST_SAVE, [$storageEventListener, 'onPostSave']);
}

<comment>Register an Event Listener as Subscriber:</comment>
The previous example registered every event inside the 'subscribe' method
in your extension class. But you can also register your listener as an Event Subscriber.
That gives you the ability to define the events it will listen on directly inside the listener class.

Register the Listener as Subscriber:
protected function subscribe(\Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher)
{
    $dispatcher->addSubscriber(new Listener\StorageEventListener($this->getContainer(), $this->getConfig()));
}

Define the Events it will listen on inside the listener class:
public static function getSubscribedEvents()
{
    return [
        \Bolt\Events\StorageEvents::POST_SAVE => 'onPostSave',
    ];
}
